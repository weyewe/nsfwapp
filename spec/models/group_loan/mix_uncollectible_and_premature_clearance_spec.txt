# Case 1: Complex case: mixing uncollectible and clearance

=begin
1. Handle the UncollectibleWeekly  + PrematureClearancePayment
  Scenario: week 1 everyone pays normal 
            week 2, member 1 declare can't pay => uncollectible
            week 3, member 2 declare premature_clearance
            week 4, member 3 declare can't pay => uncollectible 
            
            # perform the normal payment all the way 
=end

require 'spec_helper'

describe GroupLoan do
  
  before(:each) do
    (1..8).each do |number|
      Member.create_object({
        :name =>  "Member #{number}",
        :address => "Address alamat #{number}" ,
        :id_number => "342432#{number}"
      })
    end
    
    @total_weeks_1        = 8 
    @principal_1          = BigDecimal('20000')
    @interest_1           = BigDecimal("4000")
    @compulsory_savings_1 = BigDecimal("6000")
    @admin_fee_1          = BigDecimal('10000')
    @initial_savings_1          = BigDecimal('0')

    @group_loan_product_1 = GroupLoanProduct.create_object({
      :name => "Produk 1, 500 Ribu",
      :total_weeks        =>  @total_weeks_1              ,
      :principal          =>  @principal_1                ,
      :interest           =>  @interest_1                 , 
      :compulsory_savings        =>  @compulsory_savings_1       , 
      :admin_fee          =>  @admin_fee_1,
      :initial_savings          => @initial_savings_1
    }) 

    @total_weeks_2        = 8 
    @principal_2          = BigDecimal('15000')
    @interest_2           = BigDecimal("5000")
    @compulsory_savings_2 = BigDecimal("4000")
    @admin_fee_2          = BigDecimal('10000')
    @initial_savings_2          = BigDecimal('0')

    @group_loan_product_2 = GroupLoanProduct.create_object({
      :name => "Product 2, 800ribu",
      :total_weeks        =>  @total_weeks_2              ,
      :principal          =>  @principal_2                ,
      :interest           =>  @interest_2                 , 
      :compulsory_savings        =>  @compulsory_savings_2       , 
      :admin_fee          =>  @admin_fee_2     ,
      :initial_savings          => @initial_savings_2           
    })

    @glp_array  = [@group_loan_product_1, @group_loan_product_2]

    @group_loan = GroupLoan.create_object({
      :name                             => "Group Loan 1" ,
      :number_of_meetings => 3 
    })
    
    # create GLM
    Member.all.each do |member|
      glp_index = rand(0..1)
      selected_glp = @glp_array[glp_index]

      GroupLoanMembership.create_object({
        :group_loan_id => @group_loan.id,
        :member_id => member.id ,
        :group_loan_product_id => selected_glp.id
      })
    end
    
    # start group loan 
    @group_loan.start 
    @group_loan.reload

    # disburse loan 
    @group_loan.disburse_loan 
    @group_loan.reload
    
    @first_group_loan_weekly_collection = @group_loan.group_loan_weekly_collections.order("id ASC").first
    @second_group_loan_weekly_collection = @group_loan.group_loan_weekly_collections.order("id ASC")[1]
    @third_group_loan_weekly_collection = @group_loan.group_loan_weekly_collections.order("id ASC")[2]
    @fourth_group_loan_weekly_collection = @group_loan.group_loan_weekly_collections.order("id ASC")[3]
    @first_group_loan_weekly_collection.should be_valid 
    @first_group_loan_weekly_collection.collect(
      {
        :collected_at => DateTime.now 
      }
    )

    @first_group_loan_weekly_collection.is_collected.should be_truthy
    @first_group_loan_weekly_collection.confirm
    @first_group_loan_weekly_collection.reload
    @second_group_loan_weekly_collection.reload 
    @first_glm = @group_loan.active_group_loan_memberships[0] 
    @second_glm = @group_loan.active_group_loan_memberships[1] 
    @third_glm = @group_loan.active_group_loan_memberships[2] 
  end
  
  
  # it 'should confirm the first group_loan_weekly_collection' do
  #   @first_group_loan_weekly_collection.is_collected.should be_truthy 
  #   @first_group_loan_weekly_collection.is_confirmed.should be_truthy 
  # end
  
  context "create 1 uncollectible in the week 2" do
    before(:each) do
      @first_gl_wu = GroupLoanWeeklyUncollectible.create_object({
        :group_loan_id => @group_loan.id,
        :group_loan_membership_id => @first_glm.id ,
        :group_loan_weekly_collection_id => @second_group_loan_weekly_collection.id   
      })
      
      @second_group_loan_weekly_collection.collect(
        {
          :collected_at => DateTime.now 
        }
      )
      
      @second_group_loan_weekly_collection.confirm 
      @group_loan.reload 
    end
    
    # it 'should confirm the weekly collection' do
    #   @second_group_loan_weekly_collection.is_confirmed.should be_truthy 
    # end
    # 
    # it 'should have normal amount receivable minus the weekly_payment of uncollectible member' do
    #   expected_amount = BigDecimal('0')
    #   @group_loan.active_group_loan_memberships.each do |glm|
    #     next if glm.id == @first_glm.id 
    #     expected_amount += glm.group_loan_product.weekly_payment_amount 
    #   end
    #   @second_group_loan_weekly_collection.amount_receivable.should == expected_amount
    # end
    # 
    # it 'should create default_payment.amount_receivable for all members' do
    #   total_amount = @first_glm.group_loan_product.weekly_payment_amount 
    #   splitted_amount = total_amount/@group_loan.active_group_loan_memberships.count 
    #   
    #   amount_per_member = GroupLoan.rounding_up(splitted_amount, DEFAULT_PAYMENT_ROUND_UP_VALUE)
    #   
    #   @group_loan.active_group_loan_memberships.joins(:group_loan_default_payment).each do |glm|
    #     glm.group_loan_default_payment.amount_receivable.should == amount_per_member
    #   end
    # end
    
    context "declare 1 member premature clearance on week 2" do
      before(:each) do
        @sum_of_all_member_payments_minus_clearance = BigDecimal('0') 
        @initial_weekly_collection_amount_receivable = @third_group_loan_weekly_collection.amount_receivable 
        @normal_expected_weekly_collection_ar = BigDecimal('0')
        
        @group_loan.active_group_loan_memberships.each do |glm|
          @normal_expected_weekly_collection_ar += glm.group_loan_product.weekly_payment_amount 
        end
        
        
        
        @group_loan.active_group_loan_memberships.each do |glm|
          next if glm.id == @second_glm.id 
          @sum_of_all_member_payments_minus_clearance += glm.group_loan_product.weekly_payment_amount 
        end
        
        @gl_pc = GroupLoanPrematureClearancePayment.create_object({
          :group_loan_id => @group_loan.id,
          :group_loan_membership_id => @second_glm.id ,
          :group_loan_weekly_collection_id => @third_group_loan_weekly_collection.id   
        })
        
        @third_group_loan_weekly_collection.collect(
          {
            :collected_at => DateTime.now 
          }
        )
        @third_group_loan_weekly_collection.confirm 
        @third_group_loan_weekly_collection.reload 
        @gl_pc.reload 
        @second_glm.reload 
      end
      
      # it 'should set the deactivation week number to the next week' do
      #   expected_deactivation_week_number = @gl_pc.group_loan_weekly_collection.week_number + 1 
      #   expected_deactivation_week_number.should == @second_glm.deactivation_week_number
      # end
      # it 'should give normal initial_weekly_collection.amount_receivable' do
      #   @initial_weekly_collection_amount_receivable.should == @normal_expected_weekly_collection_ar
      # end
      # 
      # it 'should produce base_amount equal to the calculated amount' do
      #   @normal_expected_weekly_collection_ar.should == @third_group_loan_weekly_collection.extract_base_amount
      # end
      
      # it 'should produce 0 run away resolution' do
      #   @third_group_loan_weekly_collection.extract_run_away_weekly_resolution_amount.should == BigDecimal('0')
      # end
      # 
      # it 'should produce 0 run away resolution on uncollectible weekly payment' do
      #   @third_group_loan_weekly_collection.extract_uncollectible_weekly_payment_amount.should == BigDecimal('0')
      # end
      # 
      # it 'should generate non 0 in extract_premature_clearance_payment_amount' do
      #   @third_group_loan_weekly_collection.extract_premature_clearance_payment_amount.should_not == BigDecimal('0')
      #   premature_clearance_payment_amount = @third_group_loan_weekly_collection.extract_premature_clearance_payment_amount
      #   
      #   puts "\ninspection!! ========================\n\n"
      #   puts "The premature_clearance_payment_amount: #{premature_clearance_payment_amount.to_s}"
      #   
      #   principal = @second_glm.group_loan_product.principal 
      #   default_payment_amount_receivable = @second_glm.group_loan_default_payment.amount_receivable 
      #   total_principal_return = principal*5 
      #   puts "The weekly principal: #{principal.to_s}"
      #   puts "The total_principal_return (remaining week * principal): #{total_principal_return.to_s}"
      #   puts "default_payment amount_receivable: #{default_payment_amount_receivable.to_s}"
      #   total_payment_clearance = default_payment_amount_receivable + total_principal_return
      #   puts "  => total expected from payment_clearance: #{total_payment_clearance.to_s}"
      #   
      #   puts "\n Actual premature_clearance_amount: #{@third_group_loan_weekly_collection.extract_premature_clearance_payment_amount}"
      #   
      #   puts "\n\n END inspection!! ========================\n"
      #   
      #   # premature clearance payment: principal * remaining weeks  + default loan 
      # end
      
      # it 'should increase the normal_weekly_collection amount by the principal amount' do
      #   # this is the week 3.. it means 5 more weeks' principal to be paid 
      #   additional_amount = @second_glm.group_loan_product.principal * 5 
      #   default_payment_amount_receivable = @second_glm.group_loan_default_payment.amount_receivable 
      #   expected_amount_receivable = additional_amount + @initial_weekly_collection_amount_receivable + 
      #                                 default_payment_amount_receivable
      #   
      #   actual_amount_receivable = @third_group_loan_weekly_collection.amount_receivable
      #   
      #   puts "\n\n================ inspection =========== \n"
      #   puts "The additional_amount (5*principal): #{additional_amount.to_s}"
      #   puts "The weekly payment for premature_clearance: #{@second_glm.group_loan_product.weekly_payment_amount.to_s}"
      #   puts "The default payment: #{default_payment_amount_receivable.to_s}"
      #   puts "count of active glm: #{@third_group_loan_weekly_collection.active_group_loan_memberships.count}"
      #   
      #   
      #   puts "\n ==> The end result: "
      #   puts "expected amount receivable : #{expected_amount_receivable.to_s}"
      #   puts "actual amount receivable: #{actual_amount_receivable.to_s}"
      #   
      #   
      #   
      #   actual_amount_receivable.should == expected_amount_receivable
      # end
      
      context "week 4: 1 uncollectible collection" do
        before(:each) do
          @initial_premature_default_payment_receivable = @second_glm.group_loan_default_payment.amount_receivable
          @second_gl_wu = GroupLoanWeeklyUncollectible.create_object({
            :group_loan_id => @group_loan.id,
            :group_loan_membership_id => @third_glm.id ,
            :group_loan_weekly_collection_id => @fourth_group_loan_weekly_collection.id   
          })

          @fourth_group_loan_weekly_collection.collect(
            {
              :collected_at => DateTime.now 
            }
          )

          @fourth_group_loan_weekly_collection.confirm 
          @group_loan.reload
          @fourth_group_loan_weekly_collection.reload
        end
        
        it 'should confirm the third group loan weekly collection' do
          @fourth_group_loan_weekly_collection.is_confirmed.should be_truthy 
        end
        
        
        it 'should have deactivate @second_glm' do
          @second_glm.is_active.should be_falsey 
          @second_glm.deactivation_week_number.should == @fourth_group_loan_weekly_collection.week_number 
        end
        
        it 'should not contain @second_glm as active_glm' do
          group_loan_active_glm_id_list = @group_loan.active_group_loan_memberships.map{|x| x.id }
          weekly_collection_active_glm_id_list = @fourth_group_loan_weekly_collection.active_group_loan_memberships.map{|x| x.id}
          
          group_loan_active_glm_id_list.include?(@second_glm.id ).should be_falsey 
          weekly_collection_active_glm_id_list.include?(@second_glm.id).should be_falsey 
        end
        
        it 'should create amount receivable: all members except the uncollectible + premature_clearance' do
          expected_receivable = BigDecimal('0')
          @group_loan.active_group_loan_memberships.each do |glm|
            next if glm.id == @second_glm.id 
            next if glm.id == @third_glm.id 
            expected_receivable += glm.group_loan_product.weekly_payment_amount
          end

          @fourth_group_loan_weekly_collection.amount_receivable.should == expected_receivable
        end

        it 'should not increase the amount of default payment in the premature_clearance member' do
          @second_glm.reload 
          @final_premature_default_payment_receivable = @second_glm.group_loan_default_payment.amount_receivable
          diff  = @initial_premature_default_payment_receivable - @final_premature_default_payment_receivable
          diff.should == BigDecimal('0')
        end
        
        it 'should deduct the premature_clearance default_paymnet.amount_receivable in the new default payment calculation' do
          total_default_payment = @first_glm.group_loan_product.weekly_payment_amount +   
                                      @third_glm.group_loan_product.weekly_payment_amount 
          
          expected_default_payment_remaining =  total_default_payment - @second_glm.group_loan_default_payment.amount_receivable 
          @group_loan.default_payment_total_amount.should == expected_default_payment_remaining
        end
        
      end # end of week 4
    end # end of week 3 
    
  end # end of week 2 
  
  
end

