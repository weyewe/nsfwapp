# Case 1: Complex case: mixing run away and clearance

=begin
1. Handle the UncollectibleWeekly  + PrematureClearancePayment
  Scenario: week 1 everyone pays normal 
            week 2, member 1 declare  run away 
            week 3, member 2 declare premature_clearance
=end

require 'spec_helper'

describe GroupLoan do
  
  before(:each) do
    (1..8).each do |number|
      Member.create_object({
        :name =>  "Member #{number}",
        :address => "Address alamat #{number}" ,
        :id_number => "342432#{number}"
      })
    end
    
    @total_weeks_1        = 8 
    @principal_1          = BigDecimal('20000')
    @interest_1           = BigDecimal("4000")
    @compulsory_savings_1 = BigDecimal("6000")
    @admin_fee_1          = BigDecimal('10000')
    @initial_savings_1          = BigDecimal('0')

    @group_loan_product_1 = GroupLoanProduct.create_object({
      :name => "Produk 1, 500 Ribu",
      :total_weeks        =>  @total_weeks_1              ,
      :principal          =>  @principal_1                ,
      :interest           =>  @interest_1                 , 
      :compulsory_savings        =>  @compulsory_savings_1       , 
      :admin_fee          =>  @admin_fee_1,
      :initial_savings          => @initial_savings_1
    }) 

    @total_weeks_2        = 8 
    @principal_2          = BigDecimal('15000')
    @interest_2           = BigDecimal("5000")
    @compulsory_savings_2 = BigDecimal("4000")
    @admin_fee_2          = BigDecimal('10000')
    @initial_savings_2          = BigDecimal('0')

    @group_loan_product_2 = GroupLoanProduct.create_object({
      :name => "Product 2, 800ribu",
      :total_weeks        =>  @total_weeks_2              ,
      :principal          =>  @principal_2                ,
      :interest           =>  @interest_2                 , 
      :compulsory_savings        =>  @compulsory_savings_2       , 
      :admin_fee          =>  @admin_fee_2     ,
      :initial_savings          => @initial_savings_2           
    })

    @glp_array  = [@group_loan_product_1, @group_loan_product_2]

    @group_loan = GroupLoan.create_object({
      :name                             => "Group Loan 1" ,
      :number_of_meetings => 3 
    })
    
    # create GLM
    Member.all.each do |member|
      glp_index = rand(0..1)
      selected_glp = @glp_array[glp_index]

      GroupLoanMembership.create_object({
        :group_loan_id => @group_loan.id,
        :member_id => member.id ,
        :group_loan_product_id => selected_glp.id
      })
    end
    
    # start group loan 
    @group_loan.start 
    @group_loan.reload

    # disburse loan 
    @group_loan.disburse_loan 
    @group_loan.reload
    
    @first_group_loan_weekly_collection = @group_loan.group_loan_weekly_collections.order("id ASC").first
    @second_group_loan_weekly_collection = @group_loan.group_loan_weekly_collections.order("id ASC")[1]
    @third_group_loan_weekly_collection = @group_loan.group_loan_weekly_collections.order("id ASC")[2]
    @fourth_group_loan_weekly_collection = @group_loan.group_loan_weekly_collections.order("id ASC")[3]
    @first_group_loan_weekly_collection.should be_valid 
    @first_group_loan_weekly_collection.collect(
      {
        :collected_at => DateTime.now 
      }
    )

    @first_group_loan_weekly_collection.is_collected.should be_truthy
    @first_group_loan_weekly_collection.confirm
    @first_group_loan_weekly_collection.reload
    @second_group_loan_weekly_collection.reload 
    @first_glm = @group_loan.active_group_loan_memberships[0] 
    @second_glm = @group_loan.active_group_loan_memberships[1] 
    @third_glm = @group_loan.active_group_loan_memberships[2] 
  end
  
  
  it 'should confirm the first group_loan_weekly_collection' do
    @first_group_loan_weekly_collection.is_collected.should be_truthy 
    @first_group_loan_weekly_collection.is_confirmed.should be_truthy 
  end
  
  context "create 1 run_away in the week 2" do
    before(:each) do
      @initial_glm_count = @group_loan.active_group_loan_memberships.count 
      @run_away_member = @first_glm.member 
      @run_away_member.mark_as_run_away 
      
      @second_group_loan_weekly_collection.collect(
        {
          :collected_at => DateTime.now 
        }
      )
      
      @second_group_loan_weekly_collection.confirm 
      @group_loan.reload 
      @first_run_away = GroupLoanRunAwayReceivable.first 
    end
    
    it 'should produce 1 run away' do
      GroupLoanRunAwayReceivable.count.should == 1 
      @first_run_away.should be_valid 
      @first_run_away.group_loan_membership_id.should == @first_glm.id 
      @first_run_away.payment_case.should == GROUP_LOAN_RUN_AWAY_RECEIVABLE_CASE[:weekly]
    end
    
    it 'should set appropriate run_away deactivation case' do
      glm = @first_run_away.group_loan_membership
      glm.is_active.should be_falsey
      glm.deactivation_case.should == GROUP_LOAN_DEACTIVATION_CASE[:run_away]
      glm.deactivation_week_number.should == @second_group_loan_weekly_collection.week_number 
    end
    
    it 'should deactivate the glm' do
      @final_glm_count = @group_loan.active_group_loan_memberships.count 
      
      diff = @initial_glm_count - @final_glm_count
      diff.should == 1 
    end
    
    it 'should not update the amount of default_payment.amount_receivable' do
      @group_loan.active_group_loan_memberships.each do |glm|
        next if glm.id == @first_glm.id 
        glm.group_loan_default_payment.amount_receivable.should == BigDecimal('0')
      end
    end
    
    context "create premature clearance in week 3" do 
      before(:each) do
        @second_group_loan_weekly_collection.collect(
          {
            :collected_at => DateTime.now 
          }
        )
        @second_group_loan_weekly_collection.confirm 
        
        @group_loan.reload 
        # second_glm wants to do premature clearance 
        @first_run_away.reload 
        
        @gl_pc = GroupLoanPrematureClearancePayment.create_object({
          :group_loan_id => @group_loan.id,
          :group_loan_membership_id => @second_glm.id ,
          :group_loan_weekly_collection_id => @third_group_loan_weekly_collection.id   
        })
        
        
      end
      
      it 'should create premature clearance, weekly payment_case' do
        @gl_pc.should be_valid
        # @gl_pc.group_loan_membership.deactivation_case.should == GROUP_LOAN_DEACTIVATION_CASE[:premature_clearance]
      end
      
      context "confirming 3rd weekly collection" do
        before(:each) do
          @third_group_loan_weekly_collection.collect(
            {
              :collected_at => DateTime.now 
            }
          )
          @third_group_loan_weekly_collection.confirm
          @gl_pc.reload 
        end
        
        it 'should confirm third group weekly collection' do
          @third_group_loan_weekly_collection.is_confirmed.should be_truthy 
        end
        
        it 'should still produce valid premature clearance' do
          @gl_pc.should be_valid
          @gl_pc.is_confirmed.should be_truthy 
          glm  = @gl_pc.group_loan_membership
          glm.is_active.should be_falsey 
          glm.deactivation_case.should == GROUP_LOAN_DEACTIVATION_CASE[:premature_clearance  ]
          glm.deactivation_week_number.should_not == nil 
        end
        
        it 'should have one deactivated member with case: run_away' do
          run_away_count = @group_loan.group_loan_memberships.
                              where(:deactivation_case => GROUP_LOAN_DEACTIVATION_CASE[:run_away]).count

          run_away_count.should == 1 
          run_away_glm =  @group_loan.group_loan_memberships.
                              where(:deactivation_case => GROUP_LOAN_DEACTIVATION_CASE[:run_away]).first

          run_away_glm.deactivation_week_number.should == 2 

          amount = BigDecimal('0')
          @group_loan.group_loan_memberships.joins(:group_loan_run_away_receivable, :group_loan_product).where{
            ( is_active.eq false ) & 
            ( deactivation_case.eq GROUP_LOAN_DEACTIVATION_CASE[:run_away]) & 
            ( deactivation_week_number.lt 3 ) & 
            ( group_loan_run_away_receivable.payment_case.eq GROUP_LOAN_RUN_AWAY_RECEIVABLE_CASE[:weekly]) 
          }.count.should == 1


          @gl_pc.group_loan_membership.deactivation_week_number.should == 4 

          @group_loan.group_loan_memberships.joins(:group_loan_run_away_receivable, :group_loan_product).where{
            ( is_active.eq false ) & 
            ( deactivation_case.eq GROUP_LOAN_DEACTIVATION_CASE[:run_away]) & 
            ( deactivation_week_number.lt 4 ) & 
            ( group_loan_run_away_receivable.payment_case.eq GROUP_LOAN_RUN_AWAY_RECEIVABLE_CASE[:weekly]) 
          }.each do |glm|
            amount += glm.group_loan_product.weekly_payment_amount 
          end



          # puts "\n\n ==============> Inspecting the premature_clearance_run_away <============\n\n"

          # puts "The amount: #{amount.to_s}"
          total_active_glm = @gl_pc.group_loan_weekly_collection.active_group_loan_memberships.count
          # puts "number of active glm: #{total_active_glm}"

          share_amount = amount / total_active_glm

          # puts "Share amount: #{share_amount.to_s}"
          # puts "rounded_up: #{ GroupLoan.rounding_up( share_amount, DEFAULT_PAYMENT_ROUND_UP_VALUE)}"

          rounded_up_calculated_share_amount = @gl_pc.extract_run_away_default_weekly_payment_share
          # puts "The calculated, rounded_up: #{rounded_up_calculated_share_amount.to_s}"

          # puts "\n\n ========= end "
        end

        it 'should create appropriate amount-receivable' do 
          @gl_pc.reload 
          # @gl_pc.update_amount
          total_unpaid_week = @group_loan.number_of_collections - 
                          @gl_pc.group_loan_weekly_collection.week_number   
          total_principal =  @gl_pc.group_loan_membership.group_loan_product.principal * total_unpaid_week
          
          
          # shares_for_of_all_weekly_collection_for_run_away_members = 
          # 1. for each run_away happening before this week, sum the remaining week * weekly payment amount 
          # 2. divide the weekly payment amount by all weekly_collection.active_group_loan_memberships 
          # 3. add it to the amount for this premature_clearance  
          # 
          # what are the extra amount to be paid for run_away weekly collection? 
          # remaining_amount? In the next week, what is the weekly_collection.amount_receivable? 
          
          default_loan_amount_receivable = @gl_pc.group_loan_membership.group_loan_default_payment.amount_receivable
          expected_amount = total_principal + 
                                  default_loan_amount_receivable + 
                                  @gl_pc.extract_run_away_default_weekly_payment_share * total_unpaid_week
                                  
          puts "\n==================== Inspect the amount payable ========\n\n"
                
                
          puts "total unpaid ewek: #{total_unpaid_week}"
          puts "weekly principal: #{@gl_pc.group_loan_membership.group_loan_product.principal.to_s}"
          puts "Principal to be returned : #{total_principal.to_s}"
          
          puts "\n DefaultLoan amount receivable: #{default_loan_amount_receivable.to_s}"
          
          puts "\n Weekly run_away default payment share : #{@gl_pc.extract_run_away_default_weekly_payment_share.to_s}"
          
          puts "The expected amount: #{expected_amount.to_s}"
          puts "The actal amount: #{@gl_pc.amount.to_s}"
          
          puts "\n\n ======> End of inspection"
          @gl_pc.amount.should == expected_amount
                    
        end

        # it 'should have run_away_default_weekly_payment_share' do
        #     @gl_pc.extract_run_away_default_weekly_payment_share.should_not == BigDecimal('0')
        #   end
        #   
        #   
        #   it 'should create deactivation week in week 4' do
        #     @gl_pc.group_loan_membership.deactivation_week_number.should == 4 
        #   end
        
        # in week_3, there is premature clearance. 
        # premature clearance == pay for remaining total principal + default's share 
        
        # on top of that , he has to pay all defaults in week 3 + weekly payment 
        # it 'should not create offset run_away premature clearance @ week_3' do
        #   offset_amount = @third_group_loan_weekly_collection.extract_weekly_run_away_premature_clearance_paid_amount
        #   
        #   @group_loan.group_loan_memberships.where{
        #     ( is_active.eq false) & 
        #     ( deactivation_week_number.lte 3) & 
        #     ( deactivation_case.eq GROUP_LOAN_DEACTIVATION_CASE[:premature_clearance] ) 
        #   }.count.should == 0 
        #   
        #   
        #   offset_amount.should == BigDecimal('0')
        # end
        # 
        # it 'should create run_away_weekly premature_clearance offset in the amount_receivable' do
        #   offset_amount = @fourth_group_loan_weekly_collection.extract_weekly_run_away_premature_clearance_paid_amount
        #   offset_amount.should_not == BigDecimal('0')
        # end
        # 
        # it 'should offset the amount_receivable in weekly_collection #4' do
        #   base_amount = BigDecimal('0')
        #   @fourth_group_loan_weekly_collection.active_group_loan_memberships.each do |glm|
        #     base_amount += glm.group_loan_product.weekly_payment_amount 
        #   end
        #   
        #   # first glm is run_away glm 
        #   run_away_weekly_addition = @first_glm.group_loan_product.weekly_payment_amount 
        #   
        #   @fourth_group_loan_weekly_collection.amount_receivable.should_not == base_amount + run_away_weekly_addition
        # end

        # context "week 4: the weekly_collection.amount_receivable will be offset due to the premature clearance" do
        #   before(:each) do
        #     @fourth_group_loan_weekly_collection
        #     
        #   end
        #   
        # end
      end
      

      
    end
    
  end  
  
  
  # context 'create 1 run_away, payment_case ==  end_of_cycle ' do
  #   before(:each) do
  #     
  #    
  #     
  #     @initial_glm_count = @group_loan.active_group_loan_memberships.count 
  #     @run_away_member = @first_glm.member 
  #     @run_away_member.mark_as_run_away
  #     
  #     @first_run_away = GroupLoanRunAwayReceivable.first 
  #      
  #     @first_run_away.set_payment_case( {
  #       :payment_case =>  GROUP_LOAN_RUN_AWAY_RECEIVABLE_CASE[:end_of_cycle]
  #     } ) 
  #     
  #     @group_loan.reload 
  #   end
  #   
  #   it 'should update the payment case' do 
  #     @first_run_away.errors.size.should == 0 
  #     @first_run_away.payment_case.should ==   GROUP_LOAN_RUN_AWAY_RECEIVABLE_CASE[:end_of_cycle]
  #   end
  #   
  #   it 'should deactivate one member' do
  #     @group_loan.active_group_loan_memberships.count.should == @initial_glm_count - 1 
  #   end
  #   
  #   it 'should update default payment total amount' do
  #     @group_loan.default_payment_total_amount.should == @first_run_away.amount_receivable 
  #   end
  #   
  #   it 'should update the amount of dfeault payment' do
  #     @group_loan.active_group_loan_memberships.each do |glm|
  #       next if glm.id == @first_glm.id 
  #       glm.group_loan_default_payment.amount_receivable.should_not == BigDecimal('0')
  #     end
  #     
  #     amount_to_be_split = @first_run_away.amount_receivable 
  #     
  #     splitted_amount = amount_to_be_split/@group_loan.active_group_loan_memberships.count 
  #     
  #     rounded_up = GroupLoan.rounding_up(splitted_amount, DEFAULT_PAYMENT_ROUND_UP_VALUE)
  #     # puts "\n\n ================== The Eval ============== \n\n"
  #     # 
  #     # 
  #     # puts "amount_to_be_split: #{amount_to_be_split.to_s}"
  #     # puts "default_payment_total_amount: #{@group_loan.default_payment_total_amount.to_s}"
  #     # puts "splitted_amount: #{splitted_amount}"
  #     # puts "\nrounded up amount: #{rounded_up.to_s}\n"
  #     # puts "active_glm_count: #{@group_loan.active_group_loan_memberships.count }"
  #     # 
  #     # puts "==========> =========> the amount_receivable"
  #     # 
  #     @group_loan.active_group_loan_memberships.each do |glm|
  #       next if glm.id == @first_glm.id 
  #       
  #       # puts "glm #{glm.id}, amount_receivable: #{glm.group_loan_default_payment.amount_receivable.to_s}"
  #     
  #       glm.group_loan_default_payment.amount_receivable.should  == rounded_up
  #     end
  #   end
  #   
  #   context "create premature clearance in week 3 " do
  #     before(:each) do
  #       @second_group_loan_weekly_collection.collect(
  #         {
  #           :collected_at => DateTime.now 
  #         }
  #       )
  #       @second_group_loan_weekly_collection.confirm 
  #       
  #       @group_loan.reload 
  #       # second_glm wants to do premature clearance 
  #       @first_run_away.reload 
  #       
  #       @gl_pc = GroupLoanPrematureClearancePayment.create_object({
  #         :group_loan_id => @group_loan.id,
  #         :group_loan_membership_id => @second_glm.id ,
  #         :group_loan_weekly_collection_id => @third_group_loan_weekly_collection.id   
  #       })
  #     end
  #     
  #     it 'should not allow run_away payment to be changed to weekly' do
  #       @first_run_away.set_payment_case( {
  #         :payment_case =>  GROUP_LOAN_RUN_AWAY_RECEIVABLE_CASE[:end_of_cycle]
  #       } )
  #       
  #       @first_run_away.errors.size.should_not == 0 
  #     end
  #     
  #     it 'should create premature clearance' do
  #       @gl_pc.should be_valid 
  #       @gl_pc
  #       
  #       @gl_pc.is_confirmed.should be_falsey 
  #     end
  #     
  #     it 'should create expect the amount to be paid == principal*remaining weeks + default.amount_receivable' do
  #       total_unpaid_week = @group_loan.number_of_collections - 
  #                       @group_loan.first_uncollected_weekly_collection.week_number   
  #       total_principal =  @second_glm.group_loan_product.principal * total_unpaid_week
  #       
  #       
  #       @gl_pc.amount.should == total_principal + @second_glm.group_loan_default_payment.amount_receivable 
  #       
  #     end
  #     
  #   
  #   end
  # end
  
  
  
end

